#!/usr/bin/env python

import sys
import rospy
from std_msgs.msg import String
from irecheck.srv import *
from irecheckWorld import IrecheckWorld


class IrecheckWorldManager():
    def __init__(self):
        self.dynamicoFields = []        # list containing the names of the fields in the dynamico database
        self.latestDynamicoValues = []  # list containing the latest writing-related values obtained from dynamico
        self.MMAFields = []             # list containing the names of the fields provided by the MultiModal Analyzer
        self.latestMMAValues = []       # list containing the latest behaviour-related values obtained from the multimodal analyzer module
        self.brainFields = []           # list constaining the names of the fields generated by the irecheckBrain itself
        self.latestBrainValues = []     # list constaining the latest info generated by the irecheckBrain
        self.latestRecord = []          # list containing the latest record in the irecheck_world dataframe (currently: dynamico + MMA)
        self.commands = []              # list of commands triggered by the analysis of the latest record of the session
        self.session = None             # class containing the full representation of the iReCHeCk data (currently: dynamico + MMA)

    
        # initialize ROS node
        rospy.init_node('irecheckworldmanager', anonymous=True)
        # initialize publishers/subscribers
        # rospy.Subscriber([topic_name],[topic_type],[callback_function_name])
        rospy.Subscriber('dynamicomsg', String, self.dynamicomsgCallback)
        rospy.Subscriber('multimodalmsg', String, self.multimodalmsgCallback)
        # rospy.Publisher([topic_name],[topic_type],[max_queue_size])
        self.pubMsg = rospy.Publisher('irecheckcommand', String, queue_size=10)
        # initialize services (client)
        rospy.wait_for_service('sendDynamicoFields')
        rospy.wait_for_service('sendMMAFields')

        # define the list of field names generated by irecheckBrain
        self.brainFields = ['timestamp']
        # initialize the latestBrainValues lists
        self.latestBrainValues = ['Null'] * len(self.brainFields)

        # request the dynamico database field names
        sendFields = rospy.ServiceProxy('sendDynamicoFields', DynamicoFieldsSrv)
        dynamicoFieldsStr = str(sendFields())
        # clean the response message (remove header and "\\")
        dynamicoFieldsStr = dynamicoFieldsStr.replace("fields:"," ")    # remove header
        dynamicoFieldsStr = dynamicoFieldsStr.replace('"'," ")          # remove quotes ("")
        dynamicoFieldsStr = dynamicoFieldsStr.replace("\\"," ")         # remove \\
        # # [DEBUG ONLY]
        # print(dynamicoFieldsStr)
        # initialize the dynamicoFields and latestDynamicoValues lists
        self.dynamicoFields = dynamicoFieldsStr.split()
        self.latestDynamicoValues = ['Null'] * len(dynamicoFieldsStr.split())
        # [DEBUG ONLY]
        print(self.dynamicoFields)
        print(self.latestDynamicoValues)

        # request the MMA field names
        sendFields = rospy.ServiceProxy('sendMMAFields', MMAFieldsSrv)
        mmaFieldsStr = str(sendFields())
        # clean the response message (remove header and "\\")
        mmaFieldsStr = mmaFieldsStr.replace("fields:"," ")    # remove header
        mmaFieldsStr = mmaFieldsStr.replace('"'," ")          # remove quotes ("")
        mmaFieldsStr = mmaFieldsStr.replace("\\"," ")         # remove \\
        # # [DEBUG ONLY]
        # print(mmaFieldsStr)
        # initialize the MMAFields and latestMMAValues list
        self.MMAFields = mmaFieldsStr.split()
        self.latestMMAValues = ['Null'] * len(mmaFieldsStr.split())
        # [DEBUG ONLY]
        print(self.MMAFields)
        print(self.latestMMAValues)

        # create the object representing the current session
        self.session = IrecheckWorld(self.brainFields, self.dynamicoFields, self.MMAFields, self.latestBrainValues, self.latestDynamicoValues, self.latestMMAValues)

        # keep python from exiting until this node is stopped
        rospy.spin()
    

    # parse the dynamico record message
    def dynamicomsgCallback(self, data):
        # log the reception of the message
        message = data.data
        rospy.loginfo(rospy.get_caller_id() + '- received %s', message)

        # parse the message to get the values
        self.latestDynamicoValues = message.strip().split()

        # get the current timestamp and log it in the latestBrainValues
        self.latestBrainValues = [rospy.get_rostime()]
        print(self.latestBrainValues)

        # merge the new values with the latest values from the other sources to fill all fields
        self.latestRecord = self.latestBrainValues + self.latestDynamicoValues + self.latestMMAValues
    
        # append the new record to the session dataFrame
        self.session.addRecord(self.latestRecord)

        # analyse the latest values received from Dynamico and issue the appropriate commands
        self.commands = self.session.analyse()
    

    # parse the MMA record message
    def multimodalmsgCallback(self, data):
        # log the reception of the message
        message = data.data
        rospy.loginfo(rospy.get_caller_id() + '- received %s', message)

        # parse the message to get the values
        self.latestMMAValues = message.strip().split()

        # get the current timestamp and log it in the latestBrainValues
        self.latestBrainValues = [rospy.get_rostime()]

        # merge the new values with the latest values from the other sources to fill all fields
        self.latestRecord = self.latestBrainValues + self.latestDynamicoValues + self.latestMMAValues
    
        # append the new record to the session dataFrame
        self.session.addRecord(self.latestRecord)

        # analyse the latest values received from the MMA and issue the appropriate commands
        # TO BE DONE


#########################################################################
if __name__ == "__main__":
    try:
        myIrecheckBrain = IrecheckBrain()
    except rospy.ROSInterruptException:
        pass
    finally:
        myIrecheckBrain.session.save2csv()